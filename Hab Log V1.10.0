#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <NMEAGPS.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <SD.h>

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// GPS settings
NMEAGPS gps;
HardwareSerial &gpsSerial = Serial1;

// Temperature sensor settings
#define ONE_WIRE_BUS 10
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
DeviceAddress sensor1, sensor2;

// SD card settings
const int chipSelect = BUILTIN_SDCARD;

// LED pin
const int ledPin = 35;

// Variables to store the last valid data
int lastHours = -1, lastMinutes = -1, lastSeconds = -1;
double lastAltitude = 0;
float lastTemp1 = 0, lastTemp2 = 0;
bool gpsConfigured = false;
bool loggingStarted = false;

byte gps_set_success = 0;

void sendUBX(uint8_t *msg, uint8_t len) {
  for (uint8_t i = 0; i < len; i++) {
    gpsSerial.write(msg[i]);
    Serial.print(msg[i], HEX);
    Serial.print(" ");
  }
  gpsSerial.flush();
  Serial.println();
}

boolean getUBX_ACK(uint8_t *msg) {
  uint8_t b;
  uint8_t ackByteID = 0;
  uint8_t ackPacket[10];
  unsigned long startTime = millis();
  Serial.print(" * Reading ACK response: ");

  ackPacket[0] = 0xB5;
  ackPacket[1] = 0x62;
  ackPacket[2] = 0x05;
  ackPacket[3] = 0x01;
  ackPacket[4] = 0x02;
  ackPacket[5] = 0x00;
  ackPacket[6] = msg[2];
  ackPacket[7] = msg[3];
  ackPacket[8] = 0;
  ackPacket[9] = 0;

  for (uint8_t i = 2; i < 8; i++) {
    ackPacket[8] += ackPacket[i];
    ackPacket[9] += ackPacket[8];
  }

  while (1) {
    if (ackByteID > 9) {
      Serial.println(" (SUCCESS!)");
      return true;
    }

    if (millis() - startTime > 3000) {
      Serial.println(" (FAILED!)");
      return false;
    }

    if (gpsSerial.available()) {
      b = gpsSerial.read();
      if (b == ackPacket[ackByteID]) {
        ackByteID++;
        Serial.print(b, HEX);
        Serial.print(" ");
      } else {
        ackByteID = 0;
      }
    }
  }
}

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.display();
  delay(2000);
  display.clearDisplay();

  sensors.begin();
  if (sensors.getAddress(sensor1, 0)) {
    sensors.setResolution(sensor1, 12);
  }
  if (sensors.getAddress(sensor2, 1)) {
    sensors.setResolution(sensor2, 12);
  }

  if (!SD.begin(chipSelect)) {
    Serial.println("SD card initialization failed!");
    return;
  }
  Serial.println("SD card initialized.");

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.println("Setting uBlox flight mode: ");
  uint8_t setNav[] = {
    0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
    0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xDC
  };

  while (!gps_set_success) {
    sendUBX(setNav, sizeof(setNav) / sizeof(uint8_t));
    gps_set_success = getUBX_ACK(setNav);
  }

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);

  String line1 = "GPS CONFIG";
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(line1, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, 0);
  display.print(line1);

  String line2 = gps_set_success ? "SUCCESS" : "FAIL";
  display.getTextBounds(line2, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, 32);
  display.print(line2);

  display.display();

  if (gps_set_success) {
    Serial.println("Airborne <1G mode set successfully.");
  } else {
    Serial.println("Failed to set Airborne <1G mode.");
  }

  Serial.println("Finished setting flight mode.");
  delay(5000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  String gpsInit = "GPS INIT";
  display.getTextBounds(gpsInit, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, (SCREEN_HEIGHT - h) / 2);
  display.print(gpsInit);
  display.display();
}

void loop() {
  while (gpsSerial.available() > 0) {
    gps.handle(gpsSerial.read());
  }

  if (gps.available()) {
    gps_fix fix = gps.read();
    if (fix.valid.time && fix.valid.altitude) {
      loggingStarted = true;

      int hours = fix.dateTime.hours - 5;
      if (hours < 0) hours += 24;
      int minutes = fix.dateTime.minutes;
      int seconds = fix.dateTime.seconds;
      double altitude = fix.altitude();

      if (altitude > 35043) {
        digitalWrite(ledPin, HIGH);
      }

      sensors.requestTemperatures();
      float temp1 = sensors.getTempC(sensor1);
      float temp2 = sensors.getTempC(sensor2);

      File dataFile = SD.open("datalog.txt", FILE_WRITE);
      if (dataFile) {
        dataFile.print(hours); dataFile.print(":");
        dataFile.print(minutes); dataFile.print(":");
        dataFile.print(seconds); dataFile.print(",");
        dataFile.print(fix.latitude(), 6); dataFile.print(",");
        dataFile.print(fix.longitude(), 6); dataFile.print(",");
        dataFile.print(altitude); dataFile.print(",");
        dataFile.print(temp1); dataFile.print("C,");
        dataFile.println(temp2); dataFile.print("C");
        dataFile.close();
      } else {
        Serial.println("Error opening datalog.txt");
      }

      display.clearDisplay();
      display.setTextSize(2);

      String timeString = String(hours) + ":" + (minutes < 10 ? "0" : "") + String(minutes) + ":" + (seconds < 10 ? "0" : "") + String(seconds);
      int16_t x1, y1;
      uint16_t w, h;
      display.getTextBounds(timeString, 0, 0, &x1, &y1, &w, &h);
      display.setCursor((SCREEN_WIDTH - w) / 2, 0);
      display.print(timeString);

      display.setTextSize(2);
      String altitudeString = String(altitude, 2);
      display.getTextBounds(altitudeString, 0, 0, &x1, &y1, &w, &h);
      display.setCursor(SCREEN_WIDTH - w - 8, 16); // Adjusted to be right-justified
      display.print(altitudeString);

      String temp1String = String(temp1, 1) + "C";
      display.getTextBounds(temp1String, 0, 0, &x1, &y1, &w, &h);
      display.setCursor(SCREEN_WIDTH - w - 8, 32);
      display.print(temp1String);

      String temp2String = String(temp2, 1) + "C";
      display.getTextBounds(temp2String, 0, 0, &x1, &y1, &w, &h);
      display.setCursor(SCREEN_WIDTH - w - 8, 48);
      display.print(temp2String);

      display.display();
    } else if (!loggingStarted) {
      display.clearDisplay();
      display.setTextSize(2);
      display.setTextColor(SSD1306_WHITE);
      String gpsInit = "GPS INIT";
      int16_t x1, y1;
      uint16_t w, h;
      display.getTextBounds(gpsInit, 0, 0, &x1, &y1, &w, &h);
      display.setCursor((SCREEN_WIDTH - w) / 2, (SCREEN_HEIGHT - h) / 2);
      display.print(gpsInit);
      display.display();
    }
  }
}
